plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'me.shedaniel.unified-publishing' version '0.1.+'
    id 'net.minecraftforge.gradle' version '6.0.11'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = maven_group
version = mod_version
archivesBaseName = project.archives_base_name

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
}

minecraft {
//    mappings channel: 'official', version: minecraft_version
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config="+"custommachineryars"+".mixins.json"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', modid
        }

        server {
            property 'forge.enabledGameTestNamespaces', modid
            args '--nogui'
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven {
        name = "Custom Machinery maven"
        url = "https://maven.frinn.fr/repository/maven/"
        content {
            includeGroup "frinn.custommachinery"
        }
    }
    maven {
        name = "Mod maven"
        url = "https://modmaven.dev/"
        content {
            includeGroup "mcjty.theoneprobe"
        }
    }
    maven {
        name = "Shedaniel maven"
        url = "https://maven.architectury.dev/"
    }
    maven {
        name = "Saps maven"
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.ftb.mods"
        }
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        name = 'BlameJared Maven'
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = "ldtteam Maven"
        url = "https://ldtteam.jfrog.io/ldtteam/modding/"
        content {
            includeGroup "com.communi-suggestu.saecularia-caudices"
        }
    }

    maven { url = "https://maven.theillusivec4.top/" } // Curios
    //Needed for KubeJS
    maven {
        name = "Jitpack Maven"
        url = "https://jitpack.io"
    }
    mavenCentral()

}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    implementation fg.deobf("dev.architectury:architectury-forge:${project.architectury_version}")

    // ars
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${project.minecraft_version}-77")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.1.0")
    implementation fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-${project.minecraft_version}:${project.ars_version}.680")

    // JEI 10
    compileOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge-api:${project.jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge:${project.jei_version}")

    // Custom Machinery
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")
    implementation fg.deobf("frinn.custommachinery:CustomMachinery-forge:${project.minecraft_version}-${project.custommachinery_version}")

    //KubeJS
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${project.rhino_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${project.kubejs_version}")
    implementation fg.deobf("io.github.llamalad7:mixinextras-forge:0.2.0-rc.4")

    //Crafttweaker
    compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${project.minecraft_version}:${project.ct_version}")
    runtimeOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${project.minecraft_version}:${project.ct_version}")

    //The one probe
//    runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${project.top_version}")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
processResources {

    inputs.property "version", project.version

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand "modid": modid,
                "mod_version": mod_version,
                "mod_name": mod_name,
                "mod_description": mod_description,
                "author": author,
                "issues": issues,
                "license": license,
                "icon": icon,
                "minecraft_version": minecraft_version,
                "architectury_version": architectury_version,
                "custommachinery_version": custommachinery_version,
                "ars_version": ars_version,
                "forge_version": forge_version
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.release = 17
}

mixin {
    add sourceSets.main, "custommachineryars.refmap.json"
    config "custommachineryars.mixins.json"
}

unifiedPublishing {
    project {
        displayName = "Custom-Machinery-ArsNouveau-${project.minecraft_version}-${project.mod_version}"
        releaseType = "release"
        if(rootProject.file("CHANGELOG.md").exists()) {
            changelog = rootProject.file("CHANGELOG.md").text
        }
        gameVersions = ["${project.minecraft_version}"]
        gameLoaders = ["forge"]
        mainPublication jar

        var CURSE_API_KEY = System.getenv("CURSEFORGE_KEY")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = "969074"
                gameVersions.addAll "Java 17"
                relations {
                    depends "architectury-api"
                    depends "cloth-config"
                    depends "custom-machinery"
                    depends "ars-nouveau"
                    optional "crafttweaker"
                    optional "kubejs"
                }
            }
        }
    }
}

// Prevent Mixin annotation processor from getting into IDEA's annotation processor settings
// Copied from Botania
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
